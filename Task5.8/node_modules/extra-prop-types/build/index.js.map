{"version":3,"file":"index.js","sources":["../node_modules/invariant/invariant.js","../src/createPropType.ts","../src/validators/isColor.ts","../src/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar NODE_ENV = process.env.NODE_ENV;\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","import invariant from 'invariant';\n\ntype ValidatorProps = {\n  [key: string]: any;\n};\n\ntype MissingWarningResolver = (propName: string, propValue: any, componentName: string) => string;\ntype InvalidWarningResolver = (\n  propName: string,\n  propValue: any,\n  componentName: string,\n  validationName: string,\n) => string;\n\ntype Warnings = {\n  missing?: MissingWarningResolver;\n  invalid?: InvalidWarningResolver;\n};\n\ntype CreatorOptions = {\n  validationName: string;\n  predicate: (propValue: any) => boolean;\n  warnings?: Warnings;\n};\n\nconst defaultWarnings: Warnings = {\n  missing: (propName, propValue, componentName) =>\n    `Prop \\`${propName}\\` marked as required in \\`${componentName}\\`, but its value is \\`${propValue}\\`.`,\n\n  invalid: (propName, propValue, componentName, validationName) =>\n    `Invalid prop \\`${propName}\\` of type \\`${typeof propValue}\\` supplied to \\`${componentName}\\`, expected \\`${validationName}\\``,\n};\n\n/**\n * Creates a prop type generator function based on the provided options.\n */\nexport default function createPropType(options: CreatorOptions) {\n  const { validationName, predicate, warnings: customWarnings } = options;\n  const warnings: Warnings = Object.assign({}, defaultWarnings, customWarnings);\n\n  invariant(\n    predicate,\n    'Invalid \"predicate\" option supplied to custom prop type creator. ' + 'Expected a function, but got: %s',\n    predicate,\n  );\n\n  function generateValidator(isRequired: boolean = false) {\n    return (props: ValidatorProps, propName: string, componentName: string): void => {\n      const propValue = props[propName];\n\n      if (typeof propValue === 'undefined' || propValue === null) {\n        invariant(!isRequired, warnings.missing!(propName, propValue, componentName));\n        return;\n      }\n\n      invariant(predicate(propValue), warnings.invalid!(propName, propValue, componentName, validationName));\n      return;\n    };\n  }\n\n  const propType: any = generateValidator();\n  propType.isRequired = generateValidator(true);\n\n  return propType;\n}\n","export default function isColor(prop: string) {\n  return (\n    // hex\n    /^#(?:[A-Fa-f0-9]{3}){1,2}$/i.test(prop) ||\n    // rgb\n    /^rgb[(](?:\\s*0*(?:\\d\\d?(?:\\.\\d+)?(?:\\s*%)?|\\.\\d+\\s*%|100(?:\\.0*)?\\s*%|(?:1\\d\\d|2[0-4]\\d|25[0-5])(?:\\.\\d+)?)\\s*(?:,(?![)])|(?=[)]))){3}[)]$/i.test(\n      prop,\n    ) ||\n    // rgba\n    /^^rgba[(](?:\\s*0*(?:\\d\\d?(?:\\.\\d+)?(?:\\s*%)?|\\.\\d+\\s*%|100(?:\\.0*)?\\s*%|(?:1\\d\\d|2[0-4]\\d|25[0-5])(?:\\.\\d+)?)\\s*,){3}\\s*0*(?:\\.\\d+|1(?:\\.0*)?)\\s*[)]$/i.test(\n      prop,\n    ) ||\n    // hsl\n    /^hsl[(]\\s*0*(?:[12]?\\d{1,2}|3(?:[0-5]\\d|60))\\s*(?:\\s*,\\s*0*(?:\\d\\d?(?:\\.\\d+)?\\s*%|\\.\\d+\\s*%|100(?:\\.0*)?\\s*%)){2}\\s*[)]$/i.test(\n      prop,\n    ) ||\n    // hsla\n    /^hsla[(]\\s*0*(?:[12]?\\d{1,2}|3(?:[0-5]\\d|60))\\s*(?:\\s*,\\s*0*(?:\\d\\d?(?:\\.\\d+)?\\s*%|\\.\\d+\\s*%|100(?:\\.0*)?\\s*%)){2}\\s*,\\s*0*(?:\\.\\d+|1(?:\\.0*)?)\\s*[)]$/i.test(\n      prop,\n    )\n  );\n}\n","import createPropType from './createPropType';\nimport isColor from './validators/isColor';\nimport { Requireable } from 'types';\n\nconst colorValidator = createPropType({ validationName: 'color', predicate: (propValue) => isColor(propValue) });\n\nexport const color: Requireable<string> = colorValidator;\n"],"names":["invariant"],"mappings":"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"}